<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.itwill.running.repository.UserDao">
  
    <!-- userid 중복 체크에서 사용할 SQL -->
  	<select id="selectByUserId" resultType="User">
  		select * from users where user_id = #{userId}
  	</select>
    
    <!-- email 중복 체크에서 사용할 SQL -->
    <select id="selectByEmail" resultType="User">
        select * from users where email = #{email}
    </select>
  
    <!-- nickname 중복 체크에서 사용할 SQL -->
    <select id="selectByNickname" resultType="User">
        select * from users where nickname = #{nickname}
    </select>
    
    <!-- phoneNumber 중복 체크에서 사용할 SQL -->
    <select id="selectByPhoneNumber" resultType="User">
        select * from users where phonenumber = #{phonenumber}
    </select>
  
    <!-- 회원가입에서 사용할 SQL -->
    <insert id="insertUser" parameterType="User" useGeneratedKeys="true">
        insert into users (user_id, password, nickname, username, gender, age, 
                           phonenumber, residence, email, auth_check, img_id, user_created_time, user_access_time, token)
                           
        values (#{userId}, #{password}, #{nickname}, #{username}, #{gender}, #{age},
                #{phonenumber}, #{residence}, #{email}, #{authCheck}, #{imgId}, systimestamp, systimestamp, #{token})
    </insert>
    
    <select id="findByVerificationToken">
    	select * from users where token=#{token}
    </select>
    
    <!-- 로그인에서 사용할 SQL -->
    <select id="selectByUserIdAndPassword" resultType="User">
        select * from users 
        where user_id = #{userId} and password = #{password}
    </select>
    
    <!-- 로그인에서 최근 접속 시간을 업데이트하는 SQL -->
    <update id="updateAccessTime">
        update users
        set user_access_time = systimestamp
        where user_id = #{userId}   
    </update>
    
    <!-- 유저 토큰 업데이트 -->
    <update id="updateToken">
    	update users
    	set token=#{token}, auth_check=#{authCheck}
    	where user_id = #{userId}
    </update>
    
    
    <!-- 이미지 변경에서 사용할 SQL -->
    <update id="updateByImgId">
        update users
        set img_id = #{imgId}
        where user_id = #{userId}
    </update>
    
    <!-- 회원 정보 변경에서 사용할 SQL -->
    <update id="updateUser">
        update users 
        set password = #{password}, nickname = #{nickname}, username = #{username}, gender = #{gender}, age = #{age},
                phonenumber = #{phonenumber}, residence = #{residence}, email = #{email} 
        where user_id = #{userId}
    </update>
    
    <!-- 회원 탈퇴에서 사용할 SQL -->
    <delete id="deleteUser">
        delete from users 
        where user_id = #{userId}
    </delete>
    
    <!-- 이미지 아이디 조회에 사용할 SQL-->
    <select id="selectImgIdByUserId" resultType="int">
        select img_id from users where user_id = #{userId}
    </select>
    
    <!-- 해당 아이디의 비밀번호 조회에 사용할 SQL-->
    <select id="selectPasswordByUserId" parameterType="String" resultType="String">
        select password from users where user_id = #{userId}
    </select>
    
    <!-- 비밀번호 업데이트에 사용할 SQL -->
    <update id="updateUserByPassword" parameterType="map">
        update users
        set password = #{password}
        where user_id = #{userId}
    </update>
    
  </mapper>